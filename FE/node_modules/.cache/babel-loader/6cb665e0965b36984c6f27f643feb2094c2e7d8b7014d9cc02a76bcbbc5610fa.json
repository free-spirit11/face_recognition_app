{"ast":null,"code":"var _jsxFileName = \"/home/serhii/Desktop/Programming/Course/Projects/facerecognitionapp/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ParticleComponent from './components/ParticleComponent';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifyRequestOptions = imageUrl => {\n  const PAT = '6b5531d9b2f14276a32e427457a4bb8c';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = '4uf03bwvpmyq';\n  const APP_ID = 'my-first-application';\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\nclass App extends Component {\n  constructor() {\n    super();\n    this.calculateFaceLocation = result => {\n      const clarifaiFace = result.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      console.log(width, height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: this.state.box\n      });\n      console.log(this.state.box);\n    };\n    this.onInputChange = event => {\n      console.log(event.target.value);\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://api.clarifai.com/v2/models/face-detection/outputs\", returnClarifyRequestOptions(this.state.input)).then(response => response.json()).then(result => {\n        this.displayFaceBox(this.calculateFaceLocation(result));\n        // console.log(result)\n\n        // const regions = result.outputs[0].data.regions;\n\n        // regions.forEach(region => {\n        //     // Accessing and rounding the bounding box values\n        //     const boundingBox = region.region_info.bounding_box;\n        //     const topRow = boundingBox.top_row.toFixed(3);\n        //     const leftCol = boundingBox.left_col.toFixed(3);\n        //     const bottomRow = boundingBox.bottom_row.toFixed(3);\n        //     const rightCol = boundingBox.right_col.toFixed(3);\n\n        //     region.data.concepts.forEach(concept => {\n        //         // Accessing and rounding the concept value\n        //         const name = concept.name;\n        //         const value = concept.value.toFixed(4);\n\n        //         console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n\n        //     });\n        // });\n      }).catch(error => console.log('error', error));\n      ;\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {}\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticleComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        box: this.state.box,\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","Logo","ImageLinkForm","Rank","ParticleComponent","FaceRecognition","jsxDEV","_jsxDEV","returnClarifyRequestOptions","imageUrl","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","App","constructor","calculateFaceLocation","result","clarifaiFace","outputs","data","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","console","log","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","state","onInputChange","event","target","value","input","onButtonSubmit","fetch","then","response","json","catch","error","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/serhii/Desktop/Programming/Course/Projects/facerecognitionapp/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ParticleComponent from './components/ParticleComponent';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\n\n\nconst returnClarifyRequestOptions = (imageUrl) => {\n    const PAT = '6b5531d9b2f14276a32e427457a4bb8c';\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = '4uf03bwvpmyq';\n    const APP_ID = 'my-first-application';\n    // Change these to whatever model and image URL you want to use\n    const IMAGE_URL = imageUrl;\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    return requestOptions;\n}\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            input: '',\n            imageUrl: '',\n            box: {}\n        }\n    }\n\n    calculateFaceLocation = (result) => {\n        const clarifaiFace = result.outputs[0].data.regions[0].region_info.bounding_box;\n        const image = document.getElementById('inputimage');\n        const width = Number(image.width);\n        const height = Number(image.height);\n        console.log(width, height);\n\n        return {\n            leftCol: clarifaiFace.left_col * width,\n            topRow: clarifaiFace.top_row * height,\n            rightCol: width - (clarifaiFace.right_col * width),\n            bottomRow: height - (clarifaiFace.bottom_row * height)\n        }\n    }\n\n    displayFaceBox = (box) => {\n        console.log(box);\n\n        this.setState({ box: this.state.box });\n        \n        console.log(this.state.box);\n    }\n\n    onInputChange = (event) => {\n        console.log(event.target.value);\n        this.setState({ input: event.target.value });\n    }\n\n    onButtonSubmit = () => {\n        this.setState({ imageUrl: this.state.input });\n        fetch(\"https://api.clarifai.com/v2/models/face-detection/outputs\", returnClarifyRequestOptions(this.state.input))\n            .then(response => response.json())\n            .then(result => {\n                this.displayFaceBox(this.calculateFaceLocation(result));\n                // console.log(result)\n\n                // const regions = result.outputs[0].data.regions;\n\n                // regions.forEach(region => {\n                //     // Accessing and rounding the bounding box values\n                //     const boundingBox = region.region_info.bounding_box;\n                //     const topRow = boundingBox.top_row.toFixed(3);\n                //     const leftCol = boundingBox.left_col.toFixed(3);\n                //     const bottomRow = boundingBox.bottom_row.toFixed(3);\n                //     const rightCol = boundingBox.right_col.toFixed(3);\n\n                //     region.data.concepts.forEach(concept => {\n                //         // Accessing and rounding the concept value\n                //         const name = concept.name;\n                //         const value = concept.value.toFixed(4);\n\n                //         console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n\n                //     });\n                // });\n\n            })\n            .catch(error => console.log('error', error));;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <ParticleComponent />\n                <Navigation />\n                <Logo />\n                <Rank />\n                <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} />\n                <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl} />\n            </div>\n        );\n    }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}